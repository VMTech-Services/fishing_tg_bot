# .github/workflows/deploy.yml

name: Deploy Docker on local Windows Runner

on:
  push:
    branches: [main]

jobs:
  build-and-run:
    runs-on: [self-hosted, windows]

    env:
      BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
      GITHUB_TOKEN:      ${{ secrets.GITHUB_TOKEN }}    # автоматически создаётся перед стартом job :contentReference[oaicite:0]{index=0}

    steps:
      - name: Prepare workspace and clone repo
        shell: powershell
        run: |
          # 1. Вычисляем ветку (refs/heads/main → main)
          $branch = $env:GITHUB_REF -replace '^refs/heads/',''
          Write-Host "==> Cloning branch: $branch"

          # 2. Формируем URL для git clone с автоматическим токеном
          $repo = $env:GITHUB_REPOSITORY
          $url  = "https://x-access-token:$($env:GITHUB_TOKEN)@github.com/$repo.git"
          Write-Host "==> Repo URL (masked): $($url.Substring(0,40))..."

          # 3. Очищаем текущую папку (удаляем всё, что осталось от прошлых прогонов)
          Write-Host "==> Cleaning workspace..."
          Get-ChildItem -Force | Where-Object { $_.Name -notin '.','..' } | Remove-Item -Recurse -Force -ErrorAction SilentlyContinue

          # 4. Клонируем одну ветку и один коммит
          Write-Host "==> Running git clone..."
          git clone --depth 1 --branch $branch $url .
          if ($LASTEXITCODE -ne 0) {
            Write-Error "❌ git clone failed with exit code $LASTEXITCODE"
            exit $LASTEXITCODE
          }

      - name: Build Docker image
        run: docker build -t my-app:${{ github.sha }} .
        env:
          # чтобы Docker команду тоже видела переменные
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

      - name: Stop previous container
        run: docker rm -f my-app || exit 0

      - name: Run new container with Telegram token
        shell: powershell
        run: |
          Write-Host "==> Starting container with TELEGRAM_BOT_TOKEN"
          docker run -d --name my-app `
            -e TELEGRAM_BOT_TOKEN="$env:TELEGRAM_BOT_TOKEN" `
            my-app:${{ github.sha }}
