# .github/workflows/deploy.yml

name: Deploy Docker on local Windows Runner

on:
  push:
    branches: [main]

jobs:
  build-and-run:
    runs-on: [self-hosted, windows]
    env:
      BOT_TOKEN:     ${{ secrets.BOT_TOKEN }}           # Telegram bot token stored in GitHub Secrets
      GITHUB_TOKEN:  ${{ secrets.GITHUB_TOKEN }}        # Token for repo checkout
      REPO_NAME:     ${{ github.event.repository.name }}  # Derive repository name from GitHub context

    steps:
      - name: Clone into fresh folder
        shell: powershell
        run: |
          # Extract branch name (refs/heads/main -> main)
          $branch = $env:GITHUB_REF -replace '^refs/heads/',''
          Write-Host "==> Cloning branch: $branch"

          # Build clone URL with GITHUB_TOKEN
          $repoFull = $env:GITHUB_REPOSITORY           # owner/repo
          $url      = "https://x-access-token:$($env:GITHUB_TOKEN)@github.com/$repoFull.git"
          Write-Host "==> Clone URL masked: $($url.Substring(0,40))..."

          # Remove existing clone folder if it exists
          $path = Join-Path $PWD "fresh_repo"
          if (Test-Path $path) {
            Write-Host "==> Removing existing 'fresh_repo' directory"
            Remove-Item -Recurse -Force $path
          }

          # Create and enter clean directory
          New-Item -ItemType Directory -Path $path | Out-Null
          Set-Location $path

          # Clone only latest commit from target branch
          git clone --depth 1 --branch $branch $url .
          if ($LASTEXITCODE -ne 0) {
            Write-Error "❌ git clone failed with exit code $LASTEXITCODE"
            exit $LASTEXITCODE
          }

      - name: Build Docker image
        shell: powershell
        run: |
          # Build Docker image tagged as 'repoName:latest'
          $imageName = "$($env:REPO_NAME):latest"
          Write-Host "==> Building Docker image: $imageName"
          docker build -t $imageName fresh_repo

      - name: Stop and remove existing container
        shell: powershell
        run: |
          # Stop and remove old container named 'repoName'
          Write-Host "==> Removing existing container: $env:REPO_NAME (if any)"
          try {
            docker rm -f $env:REPO_NAME
          } catch {
            Write-Host "No existing container to remove."
          }

      - name: Run container and verify startup
        shell: powershell
        run: |
          # Start container from the latest image and verify
          $imageName = "$($env:REPO_NAME):latest"
          Write-Host "==> Starting container: $env:REPO_NAME with image $imageName"
          $cid = docker run -d --name $env:REPO_NAME `
            -e BOT_TOKEN="$env:BOT_TOKEN" `
            $imageName
          Write-Host "✅ Container started with ID: $cid"

          # Verify the container is running
          $running = docker ps -q --filter "id=$cid"
          if ($running -eq $cid) {
            Write-Host "✅ Verification passed: container is running"
          } else {
            Write-Error "❌ Verification failed: container is NOT running"
            exit 1
          }
