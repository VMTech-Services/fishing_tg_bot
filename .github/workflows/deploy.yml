# .github/workflows/deploy.yml

name: Deploy Docker on local Windows Runner

on:
  push:
    branches: [main]

jobs:
  build-and-run:
    runs-on: [self-hosted, windows]
    env:
      BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
      GITHUB_TOKEN:      ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Prepare workspace and clone repo
        shell: powershell
        run: |
         # извлекаем имя ветки из GITHUB_REF (refs/heads/main → main)
          $ref = $env:GITHUB_REF
          $branch = $ref -replace '^refs/heads/', ''
          Write-Host "Cloning branch: $branch"
          
          # формируем URL с токеном GITHUB_TOKEN
          $repo = "${{ github.repository }}"
          $token = "${{ secrets.GITHUB_TOKEN }}"
          $url = "https://x-access-token:$token@github.com/$repo.git"

          Write-Host "Clone URL starts with: $($url.Substring(0,40))..."  # токен будет замаскирован
          
          # пробуем клонировать
          git clone --depth 1 --branch $branch $url .
          if ($LASTEXITCODE -ne 0) {
            Write-Error "git clone failed with exit code $LASTEXITCODE"
            exit $LASTEXITCODE
          }

      - name: Build Docker image
        run: docker build -t my-app:${{ github.sha }} .
        shell: powershell

      - name: Stop previous container
        shell: powershell
        run: |
          Write-Host "==> Stopping previous container (if any)…"
          try {
            docker rm -f my-app
          } catch {
            Write-Host "No existing container to remove, or error ignored."
          }

      - name: Run new container with Telegram token
        shell: powershell
        run: |
          Write-Host "==> Starting container with TELEGRAM_BOT_TOKEN"
          docker run -d --name my-app `
            -e TELEGRAM_BOT_TOKEN="$env:TELEGRAM_BOT_TOKEN" `
            my-app:${{ github.sha }}
